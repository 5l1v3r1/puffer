#!/usr/bin/env python

import time
import subprocess
import sys
import os
import errno
import argparse
import inotify.adapters
import shutil


def make_sure_path_exists(target_path):
    try:
        os.makedirs(target_path)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise


def main():
    parser = argparse.ArgumentParser("A decoder mock")
    parser.add_argument("-i", "--input", action="store", required=True,
                        help="input media", dest="input")
    parser.add_argument("-v", "--video", action="store", required=True,
                        help="video output folder", dest="video")
    parser.add_argument("-a", "--audio", action="store", required=True,
                        help="audio output folder", dest="audio")
    parser.add_argument("--video-pid", action="store",
                        help="PID of video in hex", dest="video_pid")
    parser.add_argument("--audio-pid", action="store",
                        help="PID of audio in hex", dest="audio_pid")
    parser.add_argument("-p", "--port", action="store",
                        help="TCP port number", type=int, dest="port")
    args = parser.parse_args()

    input_media = args.input
    video_path = args.video
    make_sure_path_exists(video_path)
    audio_path = args.audio
    make_sure_path_exists(audio_path)

    # don't need port number as we're faking a connection
    temp_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "tmp")
    shutil.rmtree(temp_dir, ignore_errors=True)
    make_sure_path_exists(temp_dir)

    # construct the string containing PIDs of video and audio
    pid_str = ""
    if args.video_pid is not None and args.audio_pid is not None:
        pid_str = " -map i:%s -map i:%s" % (args.video_pid, args.audio_pid)

    # run ffmpeg
    ffmpeg_cmd = ("ffmpeg -nostdin -hide_banner -loglevel panic -y " +
                  "-i " + input_media + pid_str + " -an -f " +
                  "segment -segment_time 2.002 -segment_format yuv4mpegpipe " +
                  temp_dir + "/%d.y4m -vn -af aresample=async=1000 " +
                  "-f segment -segment_time 4.8 -segment_format wave " +
                  temp_dir + "/%d.wav")
    p = subprocess.Popen(ffmpeg_cmd.split())
    # use inotify to modify the name to have 90k clock
    i = inotify.adapters.Inotify()
    i.add_watch(temp_dir.encode("utf-8"))

    try:
        for event in i.event_gen():
            if event is not None:
                (header, type_names, watch_path, filename) = event
                filename = filename.decode("utf-8")
                if "IN_CLOSE_WRITE" in type_names:
                    name, ext = os.path.basename(filename).split(".")
                    num = int(name)
                    # test if it's a video file
                    if ext == "y4m":
                        new_name = str(num * 180180) + ".y4m"
                        new_path = os.path.join(video_path, new_name)
                    else:
                        new_name = str(num * 432000) + ".wav"
                        new_path = os.path.join(audio_path, new_name)
                    os.rename(os.path.join(temp_dir, filename), new_path)
    finally:
        p.kill()
        i.remove_watch(temp_dir.encode("utf-8"))


if __name__ == "__main__":
    main()
