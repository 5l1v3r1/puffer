#!/usr/bin/env python

import os
from os import path
import sys
import shutil
from test_helpers import (check_call, Popen, create_tmp_and_move_to,
                          make_sure_path_exists)


def main():
    abs_srcdir = os.environ['abs_srcdir']

    abs_builddir = os.environ['abs_builddir']
    test_tmpdir = path.join(abs_builddir, 'test_tmpdir')

    notifier_srcdir = path.join(test_tmpdir, 'notifier_bad_srcdir')
    notifier_dstdir = path.join(test_tmpdir, 'notifier_bad_dstdir')

    for directory in [notifier_srcdir, notifier_dstdir]:
        make_sure_path_exists(directory)

    run_notifier = path.abspath(
        path.join(abs_builddir, os.pardir, 'notifier', 'run_notifier'))

    # run a notifier that will call the "bad" program
    bad_prog = path.join(abs_srcdir, 'notified_bad_prog.sh')
    cmd = [run_notifier, notifier_srcdir, notifier_dstdir, bad_prog]
    notifier_proc = Popen(cmd)

    # create and move a tmp file; expect it not to be processed (copied)
    tmp_filename = create_tmp_and_move_to(notifier_srcdir)

    # the Notifier process should exit with error
    if notifier_proc:
        notifier_proc.communicate()
        if notifier_proc.returncode == 0:
            sys.exit('the Notifier should exit with error')

    tmp_filepath = path.join(notifier_dstdir, tmp_filename)
    if path.isfile(tmp_filepath):
        sys.exit('bad program should not process (copy) the test file')


if __name__ == '__main__':
    main()
